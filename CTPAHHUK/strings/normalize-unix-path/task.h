#include <string>

/*
* Постановка задачи: написать функцию, которая принимает на вход строку, содержащую путь в файловой системе;
* функция возвращает путь к этому же самому объекту в файловой системе, сокращенный до минимальной длины.
* Какие правила можно использовать для сокращения:
* - Файловая система представляет собой иерархию каталогов (папок);
* - Имя каталога является непустой строкой, состоящей из латинских букв и знаков препинания. Буквы различного регистра считаются разными;
* - Корневой каталог обозначается как `/`;
* - От корневого каталога до любого другого каталога существует уникальный путь. В записи пути каталоги разделяются знаком `/`. Так, если каталог `bar` находится в каталоге `foo`, а каталог `foo` — в корневом каталоге, то полный путь до каталога `bar` выглядит следующим образом: `/foo/bar`;
* - Запись `.` обозначает текущий каталог;
* - Запись `..` обозначает родительский каталог, а для корневого каталога — текущий каталог.
* - Переход на уровень выше `..` можно удалить, если он не в начале пути
* - Переход в текущий каталог `.` можно удалить, если весь путь не состоит из этого единственного символа (то есть это путь к текущей директории)
* - Финальный `/` можно удалить, если весь путь не состоит из этого единственного символа (то есть это путь к корневой директории)
* - Переход из корневой директории на уровень вверх оставляет нас в корневой директории (т.е. `/some_dir/../../../other_dir` == `/other_dir`)
* - Два `/` идущих подряд всегда можно заменить на один
*/

std::string normalize(std::string_view path);
